Переменными типа superglobal в PHP являются $_SERVER, $GLOBALS, $_REQUEST, $_POST, $_GET, $_FILES, $_ENV, $_COOKIE, $_SESSION.

$_SERVER - это массив, включающий такую информацию, как заголовки, пути и расположение скриптов. Элементы в этом массиве создаются веб-сервером.
<?php
echo $_SERVER['SCRIPT_NAME'];
//Выведет "/somefile.php"
?>

<?php
echo $_SERVER['HTTP_HOST'];
//Выведет "localhost"
?>

<?php
$host = $_SERVER['HTTP_HOST'];
$image_path = $host.'/images/';
?>

<?php
require 'config.php';
echo '<img src="'.$image_path.'header.png" />';
?>

$_SERVER['PHP_SELF'] 	Возвращает имя файла скрипта, который сейчас выполняется, относительно корня документов
$_SERVER['SERVER_ADDR'] 	Возвращает IP-адрес сервера, на котором выполняется текущий скрипт
$_SERVER['SERVER_NAME'] 	Возвращает имя хоста, на котором выполняется текущий скрипт
$_SERVER['HTTP_HOST'] 	Возвращает содержимое заголовка Host: из текущего запроса, если он есть
$_SERVER['REMOTE_ADDR'] 	Возвращает IP-адрес, с которого пользователь просматривает текущую страницу
$_SERVER['REMOTE_HOST'] 	Возвращает удаленный хост, с которого пользователь просматривает текущую страницу
$_SERVER['REMOTE_PORT'] 	Возвращает порт на удаленной машине, который используется для связи с сервером
$_SERVER['SCRIPT_FILENAME'] 	Возвращает абсолютный путь к исполняемому скрипту
$_SERVER['SERVER_PORT'] 	Возвращает порт на компьютере сервера, используемый сервером для соединения
$_SERVER['SCRIPT_NAME'] 	Возвращает путь к текущему исполняемому скрипту
$_SERVER['SCRIPT_URI'] 	Возвращает URI текущей страницы



$_GET и $_POST - сбор данных, которые были введены в форму.

<form action="first.php" method="post">
  <p>Name: <input type="text" name="name" /></p>
  <p>Age: <input type="text" name="age" /></p>
  <p><input type="submit" name="submit" value="Submit" /></p>
</form>

Атрибут action указывает, что при отправке формы данные отправляются в PHP-файл с именем first.php. 
HTML элементы формы имеют имена (names), которые будут использоваться при доступе к данным с помощью PHP.

first.php
<html>
<body>

Welcome <?php echo $_POST["name"]; ?><br />
Your age: <?php echo $_POST["age"]; ?>

</body>
</html>

Информация, отправленная из формы через POST метод, невидима для других, так как все имена и/или значения встроены в тело HTTP запроса. Также нет ограничений на количество отправляемой информации.

Информация, отправленная через форму по GET-методу, видна всем (все имена и значения переменных отображаются в URL). GET также устанавливает ограничения на количество отправляемой информации - около 2000 символов.

<form action="actionGet.php" method="get">
  Name: <input type="text" name="name" /><br /><br />
  Age: <input type="text" name="age" /><br /><br />
  <input type="submit" name="submit" value="Submit" />
</form>

actionGet.php:

<?php
echo "Hi ".$_GET['name'].". ";
echo "You are ".$_GET['age']." years old.";
?>

<form method = "GET">
<input type="text" name="name" />
<input type="submit" />
</form>

Сессии (sessions)

Используя сессию, вы можете хранить информацию в переменных, которые будут использоваться на нескольких страницах.
Информация не сохраняется на компьютере пользователя, как при использовании файлов cookie.

По умолчанию, переменные сессии сохраняются до тех пор, пока пользователь не закроет браузер.
Запуск PHP-сессии

Сессия начинается с помощью функции session_start().

Используйте переменную $_SESSION для установки переменных сессии:

<?php
// Start the session
session_start();

$_SESSION['color'] = "red";
$_SESSION['name'] = "John";
?>

Теперь сессионные переменные color и name доступны на нескольких страницах, в течение всей сессии.

    Функция session_start() должна быть самой первой в вашем документе. Перед любыми HTML-тегами.


<?php
// Начало сессии
session_start();
?>
<!DOCTYPE html>
<html>
<body>
<?php
echo "Your name is " . $_SESSION['name'];
// Выведет "Your name is John"
?>
</body>
</html>



Переменные вашей сессии остаются доступными в $_SESSION до тех пор, пока вы не закроете сессию.

Все глобальные переменные сессии могут быть удалены вручную с помощью функции session_unset(). Вы также можете уничтожить сессию с помощью session_destroy().


session_start();
$name = "Alex";
$_SESSION['name'] = $name;
echo $_SESSION['name']; 


Cookie

Файлы cookie часто используются для идентификации пользователя. Файл cookie - это небольшой файл, который сервер помещает на компьютер пользователя. Каждый раз, когда один и тот же компьютер запрашивает страницу через браузер, он также отправляет cookie. С помощью PHP вы можете как создавать, так и извлекать значения cookie-файлов.

Создавать cookie-файлы можно с помощью функции setcookie():

setcookie(name, value, expire, path, domain, secure, httponly);

name: определяет имя куки-файла
value: определяет значения куки-файла
expire: указывает (в секундах), когда истекает срок действия куки-файла. Value: time()+86400*30, устанавливает, что срок действия куки-файла истекает через 30 дней. Если этот параметр опустить или установить в 0, то куки-файл закончится в конце сессии (когда браузер закроется). По умолчанию равен 0.
path: указывает серверу путь к директории из которой будут доступны куки-файлы. Если параметр установлен в "/", куки-файл будет доступен в пределах всего домена. Если установлено в "/php/", cookie-файлы будут доступны только в каталоге php и во всех подкаталогах php. Значением по умолчанию является текущая директория, в которой устанавливается cookie.
domain: указывает доменное имя, которому доступны файлы cookie. Чтобы сделать куки-файлы доступными на всех поддоменах example.com, установите домен на "example.com".
secure: определяет, должен ли куки-файл передаваться только по защищенному HTTPS-соединению. TRUE указывает, что файл cookie будет установлен только при наличии защищенного соединения. По умолчанию FALSE.
httponly: Если установлено значение TRUE, куки-файл будет доступен только по протоколу HTTP (куки-файл не будет доступен для скриптовых языков). Использование httponly помогает уменьшить количество краж идентификационных данных при использовании XSS-атак. По умолчанию - FALSE.

    Параметр name - единственный обязательный параметр. Все остальные параметры являются необязательными.



    В следующем примере создается куки-файл с названием "user" со значением "John". Срок действия куки-файла истекает через 30 дней, который записывается как 86400 * 30, в которых 86400 секунд = один день. Значение "/" означает, что куки-файл доступен на всем веб-сайте.

Затем мы получаем значение куки "user" (используя superglobal переменную $_COOKIE). Мы также используем функцию isset(), чтобы узнать, установлен ли куки:

<?php
$value = "John";
setcookie("user", $value, time() + (86400 * 30), '/'); 

if(isset($_COOKIE['user'])) {
  echo "Value is: ". $_COOKIE['user'];
}
//Выведет "Value is: John"
?>

    Функция setcookie() должна появляться ПЕРЕД тегом <html>.

    Значение куки-файла автоматически кодируется при отправке и автоматически декодируется при получении. Тем не менее, НИКОГДА не храните конфиденциальную информацию в куки-файлах.

    //Напишите функцию setcookie() таким образом, чтобы установить название куки-файла "logged", со значением 1 и сроком действия в 1 час.
    setcookie("logged", 1, time()+3600);

