Запись в файл
Функция fopen() создает или открывает файл. 

$myfile = fopen("file.txt", "w");

Первый параметр функции fwrite() - это файл, в который нужно записывать; второй параметр - это строка, которую нужно записать.

<?php
$myfile = fopen("names.txt", "w");

$txt = "John\n";
fwrite($myfile, $txt);
$txt = "David\n"; //Символ \n используется для перехода на новую строку.
fwrite($myfile, $txt);

fclose($myfile);

/* Файл содержит:
John
David
*/
?>

Функция fclose() закрывает открытый файл и возвращает TRUE в случае успеха или FALSE в случае неудачи.

$handle = fopen('num.txt', 'w');
fwrite($handle, '1');
fwrite($handle, '2');
fclose($handle); //12

Добавление в файл

<?php
$myFile = "test.txt";
$fh = fopen($myFile, 'a');
fwrite($fh, "Some text");
fclose($fh);

//    При добавлении в файл с помощью режима 'a' указатель на файл помещается в конец файла, обеспечивая добавление всех новых данных в конец файла.
?>

Создадим пример формы, добавляющей в файл внесенные в нее данные:

<?php
if(isset($_POST['text'])) { //Функция isset() определяет, была ли форма отправлена, а также содержит ли она текст.
  $name = $_POST['text'];
  $handle = fopen('names.txt', 'a');
  fwrite($handle, $name."\n");
  fclose($handle); 
} //Мы не указывали атрибут action для формы, поэтому она будет отправлена сама себе.
?>
<form method="post">
  Name: <input type="text" name="text" /> 
  <input type="submit" name="submit" />
</form>
Теперь каждый раз, когда имя вводится в форму и отправляется, оно добавляется в конец файла "names.txt" в виде новой строки.

$h = fopen('my.txt', 'a');
fwrite($h, 'test');
fclose($h); //код открывал файл 'my.txt' на добавление, записывал туда текст и закрывал файл.


Чтение файла 

Функция file() считывает весь файл в массив. Каждый элемент внутри массива соответствует строке в файле:

<?php
$read = file('names.txt');
foreach ($read as $line) {
  echo $line .", ";
}
?>

В этом примере выводятся все строки из файла, разделенные запятыми.

    Мы использовали цикл foreach, потому что переменная $read - это массив.

    Следующий код позволяет избежать печати этой последней запятой:

<?php
    $read = file('names.txt');
$count = count($read);
$i = 1;
foreach ($read as $line) {
  echo $line;
  if($i < $count) {
    echo ', ';
  }
  $i++;
}
?>

Переменная $count использует функцию count() для получения количества элементов в массиве $read.
Затем, в цикле foreach, после каждой распечатки строк, мы определяем, меньше ли номер текущей строки, чем общее количество строк, и выводим запятую, если это так. 

    Это позволяет избежать вывода последней запятой, так как для последней строки $i равен $count.
<?php
    $nums = file("nums.txt");
foreach($nums as $num) {
echo $num."<br />";
} //прочитать и вывести содержимое файла "nums.txt"
?>

<?php
$h = fopen('file.txt', 'a');
for($i = 1; $i <= 10; $i++) {
fwrite($h, $i);}
fclose($h); //записать в файл числа с 1 до 10.
?>

